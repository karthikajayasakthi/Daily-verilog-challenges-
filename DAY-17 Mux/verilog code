DAY-17 MUX


//DATA FLOW MODEL

module mux_8_1( input [7:0] y,input [2:0] s,output y );
    assign y = (s == 3'b000) ? y[0] :
                 (s == 3'b001) ? y[1] :
                 (s == 3'b010) ? y[2] :
                 (s == 3'b011) ? y[3] :
                 (s == 3'b100) ? y[4] :
                 (s == 3'b101) ? y[5] :
                 (s == 3'b110) ? y[6] :y[7]; 
endmodule

//BEHAVIORAL
module mux_8_1(y,s,x);
  input wire [7:0]y;
  input wire [2:0]s;
output reg x;
  always@(*) begin
    case(s)
      3'b000:x=y[0];
      3'b001:x=y[1];
      3'b010:x=y[2];
      3'b011:x=y[3];
      3'b100:x=y[4];
      3'b101:x=y[5];
      3'b110:x=y[6];
      3'b111:x=y[7];
default:x=0;
    endcase
  end
endmodule

//STRUCTURAL MODEL
module mux_8_1(input [7:0] y,input [2:0] s, output y );
    wire ns0,ns1, ns2; 
    wire [7:0] m;  
    not (ns0,s[0]);
    not (ns1,s[1]);
    not (ns2,s[2]);
    and (m[0], y[0], ns2, ns1, ns0);  
    and (m[1], [1], ns2, ns1, s[0]);  
    and (m[2],y[2], ns2, s[1], ns0);  
    and (m[3], y[3], ns2, s[1], s[0]); 
    and (m[4], y[4], s[2], ns1, ns0); 
    and (m[5], y[5], s[2], ns1, s[0]);  
    and (m[6],y[6], s[2], s[1], ns0);  
    and (m[7], y[7], s[2], s[1], s[0]); 
    or (x, m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7]);
endmodule

//TESTBENCH
module tb;
  reg[7:0]y;
  reg[2:0]s;
wire x;
 mux_8_1 dut(.y(y),.s(s),.x(x));
initial
begin
  $dumpfile("dump.vcd");$dumpvars;
//initialize input
y=8'b0;
s=3'b0;
#10
s=3'b000;
#10
s=3'b001;
#10
s=3'b010;
#10
s=3'b011;
#10
s=3'b100;
#10
s=3'b101;
#10
s=3'b110;
#10
s=3'b111;
#10
  $finish();
end
endmodule
